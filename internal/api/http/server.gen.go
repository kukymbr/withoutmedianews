//go:build go1.22

// Package apihttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package apihttp

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// APIError defines model for APIError.
type APIError struct {
	// Message Error message
	Message string `json:"message"`
}

// Category Category of the news
type Category struct {
	// ID Numeric ID value
	ID NumericID `json:"id"`

	// Title Category title
	Title string `json:"title"`
}

// NewsItem defines model for NewsItem.
type NewsItem struct {
	// Author Name of the article author
	Author string `json:"author"`

	// Category Category of the news
	Category Category `json:"category"`

	// Content Main content of the news article
	Content string `json:"content,omitempty,omitzero"`

	// ID Numeric ID value
	ID          NumericID `json:"id"`
	PublishedAt Timestamp `json:"published_at,omitempty,omitzero"`

	// ShortText Preamble of the postamble
	ShortText string `json:"short_text"`
	Tags      []Tag  `json:"tags"`

	// Title News title
	Title string `json:"title"`
}

// NumericID Numeric ID value
type NumericID = int

// Tag News item's tag
type Tag struct {
	// ID Numeric ID value
	ID NumericID `json:"id"`

	// Name Tag name
	Name string `json:"name"`
}

// Timestamp defines model for Timestamp.
type Timestamp = time.Time

// CategoryID defines model for CategoryID.
type CategoryID = int

// TagID defines model for TagID.
type TagID = int

// DefaultError defines model for DefaultError.
type DefaultError = APIError

// GetNewsParams defines parameters for GetNews.
type GetNewsParams struct {
	// CategoryID Filter by category ID
	CategoryID CategoryID `form:"category_id,omitempty" json:"category_id,omitempty,omitzero"`

	// TagID Filter by tag ID
	TagID TagID `form:"tag_id,omitempty" json:"tag_id,omitempty,omitzero"`

	// Page Number of the page
	Page int `form:"page,omitempty" json:"page,omitempty,omitzero"`

	// PerPage Count of the items per page
	PerPage int `form:"per_page,omitempty" json:"per_page,omitempty,omitzero"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get news list
	// (GET /news)
	GetNews(w http.ResponseWriter, r *http.Request, params GetNewsParams)
	// Get news item
	// (GET /news/item/{id})
	GetNewsItem(w http.ResponseWriter, r *http.Request, id NumericID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetNews operation middleware
func (siw *ServerInterfaceWrapper) GetNews(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNewsParams

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", r.URL.Query(), &params.CategoryID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category_id", Err: err})
		return
	}

	// ------------- Optional query parameter "tag_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag_id", r.URL.Query(), &params.TagID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag_id", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", r.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "per_page", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNews(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNewsItem operation middleware
func (siw *ServerInterfaceWrapper) GetNewsItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id NumericID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNewsItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/news", wrapper.GetNews)
	m.HandleFunc("GET "+options.BaseURL+"/news/item/{id}", wrapper.GetNewsItem)

	return m
}

type DefaultErrorJSONResponse APIError

type GetNewsRequestObject struct {
	Params GetNewsParams
}

type GetNewsResponseObject interface {
	VisitGetNewsResponse(w http.ResponseWriter) error
}

type GetNews200JSONResponse []NewsItem

func (response GetNews200JSONResponse) VisitGetNewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNewsdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response GetNewsdefaultJSONResponse) VisitGetNewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetNewsItemRequestObject struct {
	ID NumericID `json:"id"`
}

type GetNewsItemResponseObject interface {
	VisitGetNewsItemResponse(w http.ResponseWriter) error
}

type GetNewsItem200JSONResponse NewsItem

func (response GetNewsItem200JSONResponse) VisitGetNewsItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNewsItemdefaultJSONResponse struct {
	Body       APIError
	StatusCode int
}

func (response GetNewsItemdefaultJSONResponse) VisitGetNewsItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get news list
	// (GET /news)
	GetNews(ctx context.Context, request GetNewsRequestObject) (GetNewsResponseObject, error)
	// Get news item
	// (GET /news/item/{id})
	GetNewsItem(ctx context.Context, request GetNewsItemRequestObject) (GetNewsItemResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetNews operation middleware
func (sh *strictHandler) GetNews(w http.ResponseWriter, r *http.Request, params GetNewsParams) {
	var request GetNewsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNews(ctx, request.(GetNewsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNews")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNewsResponseObject); ok {
		if err := validResponse.VisitGetNewsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNewsItem operation middleware
func (sh *strictHandler) GetNewsItem(w http.ResponseWriter, r *http.Request, id NumericID) {
	var request GetNewsItemRequestObject

	request.ID = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNewsItem(ctx, request.(GetNewsItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNewsItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNewsItemResponseObject); ok {
		if err := validResponse.VisitGetNewsItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xW32vjRhD+V5ZtoS+q5eTuyqGnpue2GJIQaKAPRwhjaSxtqv2R3ZEvxvh/L7sry7Kl",
	"2DlyT4mZ2fn1ffpmNjzX0miFihzPNtyABYmENvz6AoSltuv5zP8q0OVWGBJa8Yz/JWpCyxZrlrdebD7j",
	"CRfe+NygXfOEK5DIM77zeBQFT7jLK5TgI9LaeLNQhCVavt0m/B7K09kIytcTEZRnc2wTbtEZrRyGJme4",
	"hKamP63V1v/OtSJU5P8FY2qRg68hfXK+kE0v8s8WlzzjP6X7EabR6tKru3kMGPId9tImZOgd2K6W0H37",
	"3EfvInhUrDZoScSCJToHJQ6HFPzZzpxwfAFpat/9H1Awi88NOuLJbiSOrFAljwN5boTFgmdfu/APnaNe",
	"PGFOfJt0hBjm3lmYXjKqkCn85nhyVLkozs3ttpFoRT6f+WwkqMYTqaK93+dVnosicDnhEl6uUZVU8ezy",
	"06dzXQfWxIBjjd/iNzcnlEM0oKEqonRY5S1I3A0DLIm8Rtb6HiCjF8HlC4wgk3Rfzrm5dcD4N3sCH5Z0",
	"A0Kx1trHaVffWAHfCZlpFrVwFRaPQOce3guJjkAa/9BV2tIj4ctI3XcWQS7qbpxG+2eLUHAP5Yvp5ceR",
	"DgjKSD5C6c7WBPFNDALWwvoEEz0rRlg4s436z8si03neWIsFk+CcWCEjC8ulyNkTSCZU6Ob66j1kPZhc",
	"wts/HdE6/rRzGOV2B+CwwWhi8xlbQd30GNLpaZDsV0bjR/6L85L9XimI+n6c5B5KFiz96d+Ay/WxAvz2",
	"8U0zDcHGZrTnarbhS22lpzcvgPBXEnLky/HhhVrq3UaBPBAbJYjaL6oKLQqntGuM0ZZ+b+uf5Fru19nV",
	"3Zy1DnywRrzRWL0ShVAlaxzW6Fz4nicdOzL+r6BKN3SDhYDbqMkrtC6GmE6mkwsfWRtUYATP+IfJdPLB",
	"owVUBaDSoOTZhpc48mn+jRRIXAt3KClr3bAcFFO4Qr/k6jXTiodMNizUeRGft0X1D4+v48TYu6S9w2Sb",
	"nPWON4V3HLB7gbZTlbg0x86K1nTqcBksKd3sRTZIDzNoTyZB+3g+0cPR9XI5nX7X0fImFey23UAKh9fM",
	"9THyMUPwC3fOa8m6NtKDCyycQY2U4Jde4FeI6gkWbIGPqU+SbkSxPclMJ1RZ98ry96MgF+/HUSaGrgds",
	"fEXaeneo/1z2UAYt2YsL2QaTNx6OPdV7N9Zvg3gI6T9HY/vhYIousUO7Gp/ytc6hZtHOE95YL5sVkcnS",
	"tPa2SjvKNl4btykYka4uvLaBFbCo47yCbgZitLXzz9PPU5/4Yft/AAAA///ATvZO+QwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
